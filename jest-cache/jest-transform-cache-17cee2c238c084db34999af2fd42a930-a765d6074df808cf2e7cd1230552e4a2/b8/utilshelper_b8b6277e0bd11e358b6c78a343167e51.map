{"version":3,"sources":["utils.helper.js"],"names":["jsonToFormData","json","formName","formData","FormData","Object","keys","forEach","key","set","dataURItoBlob","dataURI","byteString","split","indexOf","atob","unescape","mimeString","ia","Uint8Array","length","i","charCodeAt","Blob","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeY;;;;;;;;;;;AAfZ;AAEO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAAOC,QAAP,EAAoB;AAAA;AAAA;AAChD,MAAMC,QAAQ;AAAA;AAAA,2BAAG,IAAIC,QAAJ,EAAH,CAAd;;AADgD;AAAA;AAEhDC,EAAAA,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkBM,OAAlB,CAA0B,UAACC,GAAD,EAAS;AAAA;AAAA;AAAA;AACjCL,IAAAA,QAAQ,CAACM,GAAT;AAAA;AAAA,cAAgBP,QAAhB,cAA4BM,GAA5B,QAAoCP,IAAI,CAACO,GAAD,CAAxC;AACD,GAFD;;AAFgD;AAAA;AAKhD,SAAOL,QAAP;AACD,CANM;;;;;;AAQA,IAAMO,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAa;AAAA;AAAA;AACxC;AACA,MAAIC,UAAJ;;AAFwC;AAAA;;AAGxC,MAAID,OAAO,CAACE,KAAR,CAAc,GAAd,EAAmB,CAAnB,EAAsBC,OAAtB,CAA8B,QAA9B,KAA2C,CAA/C,EAAkD;AAAA;AAAA;AAAA;AAAAF,IAAAA,UAAU,GAAGG,IAAI,CAACJ,OAAO,CAACE,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAD,CAAjB;AAAyC,GAA3F,MACK;AAAA;AAAA;AAAA;AAAAD,IAAAA,UAAU,GAAGI,QAAQ,CAACL,OAAO,CAACE,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAD,CAArB;AAA6C,GAJV,CAMxC;;;AACA,MAAMI,UAAU;AAAA;AAAA,2BAAGN,OAAO,CAACE,KAAR,CAAc,GAAd,EAAmB,CAAnB,EAAsBA,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,EAAoCA,KAApC,CAA0C,GAA1C,EAA+C,CAA/C,CAAH,CAAhB,CAPwC,CASxC;;AACA,MAAMK,EAAE;AAAA;AAAA,4BAAG,IAAIC,UAAJ,CAAeP,UAAU,CAACQ,MAA1B,CAAH,CAAR;;AAVwC;AAAA;;AAWxC,OAAK,IAAIC,CAAC;AAAA;AAAA,4BAAG,CAAH,CAAV,EAAgBA,CAAC,GAAGT,UAAU,CAACQ,MAA/B,EAAuCC,CAAC,IAAI,CAA5C,EAA+C;AAAA;AAAA;AAC7CH,IAAAA,EAAE,CAACG,CAAD,CAAF,GAAQT,UAAU,CAACU,UAAX,CAAsBD,CAAtB,CAAR;AACD;;AAbuC;AAAA;AAexC,SAAO,IAAIE,IAAJ,CAAS,CAACL,EAAD,CAAT,EAAe;AAAEM,IAAAA,IAAI,EAAEP;AAAR,GAAf,CAAP;AACD,CAhBM","sourcesContent":["/* eslint-disable import/prefer-default-export */\n\nexport const jsonToFormData = (json, formName) => {\n  const formData = new FormData();\n  Object.keys(json).forEach((key) => {\n    formData.set(`${formName}[${key}]`, json[key]);\n  });\n  return formData;\n};\n\nexport const dataURItoBlob = (dataURI) => {\n  // convert base64/URLEncoded data component to raw binary data held in a string\n  let byteString;\n  if (dataURI.split(',')[0].indexOf('base64') >= 0) byteString = atob(dataURI.split(',')[1]);\n  else byteString = unescape(dataURI.split(',')[1]);\n\n  // separate out the mime component\n  const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n\n  // write the bytes of the string to a typed array\n  const ia = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i += 1) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n\n  return new Blob([ia], { type: mimeString });\n};\n"]}