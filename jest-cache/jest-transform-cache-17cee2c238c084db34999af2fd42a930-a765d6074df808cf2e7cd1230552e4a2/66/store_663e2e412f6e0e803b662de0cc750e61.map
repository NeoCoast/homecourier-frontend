{"version":3,"sources":["store.js"],"names":["rootReducer","combineReducers","logUser","userNotifications","persistConfig","key","version","storage","blacklist","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AASA;AAAA;AAAA;;AAGA;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACY;;;;;;;;;AACZ,IAAMA,WAAW;AAAA;AAAA;AAAG;AAAA;AAAAC;AAAAA;AAAAA;AAAAA,iBAAgB;AAClCC,EAAAA,OAAO;AAAPA;AAAAA;AAAAA;AAAAA,YADkC;AAElCC,EAAAA,iBAAiB;AAAjBA;AAAAA;AAAAA;AAAAA;AAFkC,CAAhB,CAAH,CAAjB;AAKA,IAAMC,aAAa;AAAA;AAAA,0BAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AAEpBC,EAAAA,OAAO,EAAE,CAFW;AAGpBC,EAAAA,OAAO;AAAPA;AAAAA;AAAAA;AAAAA,YAHoB;AAIpBC,EAAAA,SAAS,EAAE,CAAC,mBAAD;AAJS,CAAH,CAAnB;AAOA,IAAMC,gBAAgB;AAAA;AAAA;AAAG;AAAA;AAAAC;AAAAA;AAAAA;AAAAA,gBAAeN,aAAf,EAA8BJ,WAA9B,CAAH,CAAtB;AAEA,IAAMW,KAAK;AAAA;AAAA;AAAG;AAAA;AAAAC;AAAAA;AAAAA;AAAAA,gBAAe;AAC3BC,EAAAA,OAAO,EAAEJ,gBADkB;AAE3BK,EAAAA,UAAU;AAAE;AAAA;AAAAC;AAAAA;AAAAA;AAAAA,wBAAqB;AAC/BC,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,cAAc,EAAE;AAACC;AAAAA;AAAAA;AAAAA,WAAD;AAAQC;AAAAA;AAAAA;AAAAA,eAAR;AAAmBC;AAAAA;AAAAA;AAAAA,WAAnB;AAA0BC;AAAAA;AAAAA;AAAAA,aAA1B;AAAmCC;AAAAA;AAAAA;AAAAA,WAAnC;AAA0CC;AAAAA;AAAAA;AAAAA,cAA1C;AADC;AADY,GAArB;AAFe,CAAf,CAAH,CAAX;;;eASeZ,K","sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport { combineReducers } from '@reduxjs/toolkit';\nimport logUser from 'Reducers/logUser';\nimport userNotifications from 'Reducers/userNotifications';\n\nconst rootReducer = combineReducers({\n  logUser,\n  userNotifications,\n});\n\nconst persistConfig = {\n  key: 'root',\n  version: 1,\n  storage,\n  blacklist: ['userNotifications'],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n});\n\nexport default store;\n"]}